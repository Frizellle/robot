#include <Servo.h>
#include <VL53L0X.h>

const int PIN_Motor_PWMA = 5;
const int PIN_Motor_PWMB = 6;
const int PIN_Motor_BIN_1 = 8;
const int PIN_Motor_AIN_1 = 7;
const int PIN_Motor_STBY = 3;
const int IRright = A0;
const int IRmid = A1;
const int IRleft = A2;
const int lIR = A8;
const int rIR = A10;
#define TRIG_PIN 13
#define ECHO_PIN 12
int curLine = 0;
bool incrementable = true;
bool grabbed = false;
bool arrived = true;


Servo claw;
Servo arm;
VL53L0X lidar;

void setup() {
  pinMode(IRright, INPUT);
  pinMode(IRmid, INPUT);
  pinMode(IRleft, INPUT);
  lidar.init();
  Serial.begin(9600);
  claw.attach(44);
  claw.write(0);
  arm.attach(38);
  arm.write(0);
  pinMode(PIN_Motor_PWMA, OUTPUT);
  pinMode(PIN_Motor_PWMB, OUTPUT);
  pinMode(PIN_Motor_AIN_1, OUTPUT);
  pinMode(PIN_Motor_BIN_1, OUTPUT);
  pinMode(PIN_Motor_STBY, OUTPUT);
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
}


void loop() {
  int IRr = analogRead(IRright);
  int IRm = analogRead(IRmid);
  int IRl = analogRead(IRleft);
  int leftIR = analogRead(lIR);
  int rightIR = analogRead(rIR);
  int prevLine = 500;
  int targetLine = 5;
  
  //Serial.println(USTest());
  if (USTest() < 8 && USTest() > 2 && !grabbed && arrived)
  {
    //stopAndGrab();
    grabbed = true;
  }
  
  else 
  {
    //Serial.println(leftIR);
    if (leftIR > 700 && incrementable) 
  {
    Serial.println("incrementing");
    Serial.println(leftIR);
    curLine++;
    curLine++;
    if (curLine >= targetLine)
    {
      if (targetLine % 2 == 1) turnLeft();
      else turnRight();
      delay(4000);
    }
    Serial.println(curLine);
    incrementable = false;//turnLeft();
    //Serial.println(incrementable);
  }
    if (IRr < 700) adjustLeft();
    else if (IRl < 700) adjustRight();
    else goStraight();
  }
  incrementable = (leftIR < 500);
  //Serial.println(incrementable);
}

/*void hold
{
  int IR = analogRead(IRsensor);
  Serial.println("hi");
  Serial.println(IR);
  if (IR > 900)
  {
    Serial.println(IR);
    claw.write(0);
    delay(2000);
    claw.write(180);
    delay(700);
  }
  delay(100);
}*/

void adjustRight()
{
  analogWrite(PIN_Motor_PWMA, 75);
  analogWrite(PIN_Motor_PWMB, 50);
  digitalWrite(PIN_Motor_AIN_1, HIGH); // reverses right hand wheels when off
  digitalWrite(PIN_Motor_BIN_1, HIGH); // reverses left hand wheels when off
  digitalWrite(PIN_Motor_STBY, HIGH); // disables all when off
}

void adjustLeft()
{
  analogWrite(PIN_Motor_PWMA, 50);
  analogWrite(PIN_Motor_PWMB, 75);
  digitalWrite(PIN_Motor_AIN_1, HIGH); // reverses right hand wheels when off
  digitalWrite(PIN_Motor_BIN_1, HIGH); // reverses left hand wheels when off
  digitalWrite(PIN_Motor_STBY, HIGH); // disables all when off
}

void goStraight()
{
  analogWrite(PIN_Motor_PWMA, 75);
  analogWrite(PIN_Motor_PWMB, 75);
  digitalWrite(PIN_Motor_AIN_1, HIGH); // reverses right hand wheels when off
  digitalWrite(PIN_Motor_BIN_1, HIGH); // reverses left hand wheels when off
  digitalWrite(PIN_Motor_STBY, HIGH); // disables all when off
}

void turnLeft()
{
  
  analogWrite(PIN_Motor_PWMA, 75);
  analogWrite(PIN_Motor_PWMB, 75);
  digitalWrite(PIN_Motor_AIN_1, HIGH); // reverses right hand wheels when off
  digitalWrite(PIN_Motor_BIN_1, LOW); // reverses left hand wheels when off
  digitalWrite(PIN_Motor_STBY, HIGH); // disables all when off
}

void turnRight()
{
  
  analogWrite(PIN_Motor_PWMA, 75);
  analogWrite(PIN_Motor_PWMB, 75);
  digitalWrite(PIN_Motor_AIN_1, LOW); // reverses right hand wheels when off
  digitalWrite(PIN_Motor_BIN_1, HIGH); // reverses left hand wheels when off
  digitalWrite(PIN_Motor_STBY, HIGH); // disables all when off
}

long USTest()
{
  long duration, distance;
  
  // Clear the TRIG_PIN by setting it LOW
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(200);
  
  // Trigger the sensor by setting the TRIG_PIN HIGH for 10 microseconds
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(1000);
  digitalWrite(TRIG_PIN, LOW);
  
  // Read the signal from the sensor: a HIGH pulse whose
  // duration is the time (in microseconds) from the sending
  // of the ping to the reception of its echo off of an object
  distance = pulseIn(ECHO_PIN, HIGH)/60;
  //Serial.println("Distance: ");
  //Serial.println(distance);
  
  delay(100);
  return distance;

}

int readLidar(VL53L0X lidar)
{
  int reading = lidar.readRangeSingleMillimeters();
  //Serial.println(reading);
  return reading;
}

void stopAndGrab()
{

  stop();
  int i = 0; 
  while (readLidar(lidar) > 60)
  {
    //Serial.println(lidar.readRangeSingleMillimeters());
    arm.write(5*i);
    
    delay(300);
    i++;
  }
  grab();
}

void stop()
{
  digitalWrite(PIN_Motor_STBY, LOW); // disables all when off
}

void grab()
{
  claw.write(180);
  delay(1500);
}
